USER INTEGRATION:

THERE ARE MULTIPLE FILES IN THIS DOCUMENT 1 VIEW, 3 TEMPLATES, some SETTINGS AND URLS and other instructions
THERE ARE MULTIPLE FILES IN THIS DOCUMENT 1 VIEW, 3 TEMPLATES, some SETTINGS AND URLS and other instructions
THERE ARE MULTIPLE FILES IN THIS DOCUMENT 1 VIEW, 3 TEMPLATES, some SETTINGS AND URLS and other instructions
THERE ARE MULTIPLE FILES IN THIS DOCUMENT 1 VIEW, 3 TEMPLATES, some SETTINGS AND URLS and other instructions
Everything in here has been tested and works as required.

Replace my original view with this new version which handles user:
Please notice the "decorators" prior to each function; You will need to add them to each 
of your existing functions to force a login request if the user is not logged in; Modify the
URL accordingly; My view already has them; Example:
@login_required(login_url='/jobtracker/login/')

To use the logged in user in your views simply use:  request.user or request.user.username (depending on what you
are doing). Example to select data objects do:
            all_docs = Document.objects.filter(user_name=request.user).order_by('doc_ul_date')

If you try my Document list you can see that different documents will be displayed for a different user

Notice that all 3 functions (register/login/logout) are in this view; 
I have not yet completed the validation of the email but it's an optional field we'll do it later if there is time,
the rest of the validations are included.
Also I have added a variable to the template so that the logged in user shows on the top of the page
and next to it there is a link to log out; You should add that in your views too;
Once again this may need to be changed to fit your path.



VIEWS.PY

from django.shortcuts import get_object_or_404, render_to_response
from django.http import HttpResponseRedirect, HttpResponse
#from django.core.urlresolvers import reverse
from django.template import RequestContext
from django.template import Context, loader

from  models import Document
#from jobsmodels import User
from django.contrib.auth.models import User


from django.core.files.storage import default_storage
from django.core.files.base import ContentFile
from django.core.files.storage import FileSystemStorage
from django.core.files import File

from django.contrib.auth import authenticate
from django.contrib.auth.decorators import login_required
from django.contrib.auth import authenticate
from django.contrib.auth.models import User
from django.contrib.auth import login
from django.contrib.auth import logout
#from django.forms.fields import email_re
import re
from django.core.validators import validate_email
from django.core.exceptions import ValidationError



# manages all files and forms for the jobs tracking system

# Displays the available documents
@login_required(login_url='/jobtracker/login/')
def listdocs(request):
    if request.method == 'GET':
        # retrieve and display all documents
        all_docs = Document.objects.filter(user_name=request.user).order_by('doc_ul_date')
        return render_to_response('listdocums.html', {'all_docs': all_docs,
                                                      'username': request.user.username},
                               context_instance=RequestContext(request))

#   posting corresponds to uploading a document
    elif request.method == 'POST':

        # all fields must have been entered         
        try:
            newdoc = Document()
            newdoc.doc_descr = request.POST['doc_descr']
            newdoc.doc_type  = request.POST['doc_type']
            newdoc.the_doc   = request.FILES['the_doc']
            newdoc.doc_mime  = request.FILES['the_doc'].content_type
  
        except :
            # display the error
            all_docs = Document.objects.filter(user_name=request.user).order_by('doc_ul_date')
            return render_to_response('listdocums.html', {
                'all_docs': all_docs, 'username': request.user.username,
                'error_message': "You did not enter all required data"},
                 context_instance=RequestContext(request))

        else:
            curruser = User.objects.get(username=request.user.username)
            newdoc.user_name = curruser

            newdoc.save()         

            all_docs = Document.objects.filter(user_name=request.user).order_by('doc_ul_date')
            return HttpResponseRedirect('/jobtracker/document/')
            
    else:       
        raise Http404


#    download (GET) or remove (DELETE) the file correcponding to
#    the document id received 
@login_required(login_url='/jobtracker/login/')
def getdoc(request, doc_id):
    if request.method == 'GET':
        
#        this_doc = Document.objects.get(pk=1)
#        this_doc = get_object_or_404(Document, pk=doc_id)
        this_doc = get_object_or_404(Document, user_name=request.user,doc_key=doc_id)
#        this_doc =  Document.objects.filter(user_name=request.user,doc_key=doc_id)        
        # send the file as a header attachment 
        response = HttpResponse(this_doc.the_doc._get_file(), content_type= this_doc.doc_mime) #this_doc.the_doc.enctype)
        response['Content-Disposition'] = 'attachment; filename=' + this_doc.the_doc.name
        return response

@login_required(login_url='/jobtracker/login/')
def deldoc(request):
    if request.method == 'POST':
         
        try:
        
         this_doc = get_object_or_404(Document, user_name=request.user,doc_key=request.POST['doc_id'])
         
        except :
            all_docs = Document.objects.filter(user_name=request.user).order_by('doc_ul_date')
            return render_to_response('listdocums.html', {
                'all_docs': all_docs, 'username': request.user.username,
                'error_message': "Document not found"},
                 context_instance=RequestContext(request))
        else:
            this_doc.the_doc.delete() # remove file
            this_doc.delete()         # remove document
        
            return HttpResponseRedirect('/jobtracker/document/')



def loginfunc(request):
    if request.method == 'GET':
        # display the login form    
        return render_to_response('loginpage.html', 
            {'error_message': "login or register your account"},
                               context_instance=RequestContext(request))

    elif request.method == 'POST':
        username = request.POST['username']
        password = request.POST['password']
        user = authenticate(username=username, password=password)
        if user is not None:
            login(request, user)
            return HttpResponseRedirect('/jobtracker/document/')
        else:
            # Return an 'invalid login' error message.
            return render_to_response('loginpage.html', {
                'error_message': "Invalid account "},
                 context_instance=RequestContext(request))


def logoutfunc(request):
    logout(request)
    return HttpResponseRedirect('/jobtracker/login/')


def registerfunc(request):
    if request.method == 'GET':
        # display the login form    
        return render_to_response('registerpage.html', 
            {'error_message': "enter an account and password to register"},
                               context_instance=RequestContext(request))

    elif request.method == 'POST':
#        try:
#            useremail = request.POST['useremail']
#            if is_valid_email(useremail) == False:
                # display the error
#                return render_to_response('registerpage.html', 
#                    {'error_message': "invalid email"},
#                               context_instance=RequestContext(request))
#        except :
        useremail = 'auser@nothere.com'  # email is optional
            
        try:
            username  = request.POST['username']
            password1 = request.POST['password1']
            password2 = request.POST['password2']
        except :
            # display the error
            return render_to_response('registerpage.html', 
                {'error_message': "user id and pw are required"},
                               context_instance=RequestContext(request))
        else:
            # validate user (must not exist)
            checkuser = User.objects.filter(username__iexact=username)
            if checkuser.exists() or not is_user_valid(username):
                return render_to_response('registerpage.html', 
                    {'error_message': "user already exist or invalid"},
                               context_instance=RequestContext(request))
            else:                
                 # the 2 pw must match and not be space
                if password1 <= ' '  or password1 != password2: 
                    return render_to_response('registerpage.html', 
                        {'error_message': "Invalid password"},
                               context_instance=RequestContext(request))
                else:
                    # register the user
                    new_user = User.objects.create_user(username, useremail, password1)
                    new_user.is_active = True
                    new_user.save()
                    # login the new user
                    new_user = authenticate(username=username, password=password1)
                    if new_user is not None:
                        login(request, new_user)
                        return HttpResponseRedirect('/jobtracker/login/')
                    else:
                        return render_to_response('registerpage.html', 
                        {'error_message': "Could not create user"},
                               context_instance=RequestContext(request))

#        if User.objects.filter(email__iexact=self.cleaned_data['email']):
#            raise forms.ValidationError(_("This email address is already in use. Please supply a different email address."))
#        return self.cleaned_data['email']


def is_valid_email(email):
    try:
        validate_email( email )
        return True
    except ValidationError:
        return False
    
def is_user_valid(username):
    if re.match(r'^[\w.@+-]+$', username) != None:
        return 1
    return 0





URL CHANGES:

You need these new URLS:
    url(r'^jobtracker/login/$', 'jobsapp.views.loginfunc'),
    url(r'^jobtracker/logout/$', 'jobsapp.views.logoutfunc'),
    url(r'^jobtracker/register/$', 'jobsapp.views.registerfunc'),



SETTING CHANGES:
need these parameters set up: Change path as needed for your set up

# Absolute filesystem path to the directory that will hold user-uploaded files.
MEDIA_ROOT = '/home/cpsc473/virtualenvs/Django/prjs/jobtracker/uploads/'

# URL that handles the media served from MEDIA_ROOT. Make sure to use a
# trailing slash.
MEDIA_URL = 'http://jobtracker/uploads/'

# The login url page
LOGIN_URL = '/jobtracker/login/'


under the jobtracker main folder create a directory called 'uploads' and a sub dir within it called 'docs'






THESE ARE THE NEW TEMPLATES TO REGISTER/LOGIN
They are all nicely styled and ready to use; Change urls in each according to your path; 2 are new
and the third is a replacement with new stuff.

loginpage.html

<!DOCTYPE html>
<html lang="en-us" >
<head>
<title>Log in </title>
<link rel="stylesheet" type="text/css" href="/static/admin/css/base.css" />
<link rel="stylesheet" type="text/css" href="/static/admin/css/login.css" />
<!--[if lte IE 7]><link rel="stylesheet" type="text/css" href="/static/admin/css/ie.css" /><![endif]-->

<script type="text/javascript">window.__admin_media_prefix__ = "/static/admin/";</script>

<meta name="robots" content="NONE,NOARCHIVE" />
</head>


<body class="login">

<!-- Container -->
<div id="container">

    
    <!-- Header -->
    <div id="header">
        <div id="branding">
        
<h1 id="site-name">JobTracker login</h1>

        </div>
        
        
    </div>
    <!-- END Header -->
    
 
    <!-- Content -->
    <div id="content" class="colM">
        
 

<div id="content-main">
<form action="/jobtracker/login/" method="post" id="login-form"><div style='display:none'></div>
  {% csrf_token %} 
  <div class="form-row">
    
    <label for="id_username" class="required">Username:</label> <input id="id_username" type="text" name="username" maxlength="30" />
  </div>
  <div class="form-row">
    
    <label for="id_password" class="required">Password:</label> <input type="password" name="password" id="id_password" />
    <input type="hidden" name="this_is_the_login_form" value="1" />
    <input type="hidden" name="next" value="/jobtracker/document/" />

  </div>
  
  
  <div class="submit-row">
    <label>&nbsp;</label><input type="submit" value="Log in" />
  </div>
</form>

  <div>   <a href="/jobtracker/register">(Register)</a> </div>


<script type="text/javascript">
document.getElementById('id_username').focus()
</script>
</div>

        
        <br class="clear" />
    </div>
    <!-- END Content -->

    <div id="footer"
        style='color:red'>
        {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    </div>
    
</div>
<!-- END Container -->

</body>
</html>



registerpage.html

<!DOCTYPE html>
<html lang="en-us" >
<head>
<title>Log in | Django site admin</title>
<link rel="stylesheet" type="text/css" href="/static/admin/css/base.css" />
<link rel="stylesheet" type="text/css" href="/static/admin/css/login.css" />
<!--[if lte IE 7]><link rel="stylesheet" type="text/css" href="/static/admin/css/ie.css" /><![endif]-->

<script type="text/javascript">window.__admin_media_prefix__ = "/static/admin/";</script>

<meta name="robots" content="NONE,NOARCHIVE" />
</head>


<body class="login">

<!-- Container -->
<div id="container">

    
    <!-- Header -->
    <div id="header">
        <div id="branding">
        
<h1 id="site-name">JobTracker Account Registration</h1>

        </div>
        
        
    </div>
    <!-- END Header -->
    

    <!-- Content -->
    <div id="content" class="colM">
        

<div id="content-main">
<form action="/jobtracker/register/" method="post" id="login-form"><div style='display:none'></div>
      {% csrf_token %} 
<div class="form-row">
    
    <label for="id_username" class="required">Username:</label> <input id="id_username" type="text" name="username" maxlength="30" />
  </div>

  <div class="form-row">
    <label for="id_password" class="required">Password:</label> <input type="password" name="password1" id="id_password" />
    <input type="hidden" name="this_is_the_login_form" value="1" />
    <input type="hidden" name="next" value="/jobtracker/register/" />
  </div>

  <div class="form-row">
    
    <label for="id_password" class="required">Confirm:</label> <input type="password" name="password2" id="id_password" />
    <input type="hidden" name="this_is_the_login_form" value="2" />
    <input type="hidden" name="next" value="/jobtracker/register/" />
  </div>
  
  <div class="form-row">
    
    <label for="id_email" >Optional email:</label> <input id="id_email" type="text" name="useremail" maxlength="60" />
  </div>
   
  <div class="submit-row">
    <label>&nbsp;</label><input type="submit" value="Register" />
  </div>
</form>

<script type="text/javascript">
document.getElementById('id_username').focus()
</script>
</div>

        
        <br class="clear" />
    </div>
    <!-- END Content -->

    <div id="footer"
        style='color:red'>
        {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    </div>
    
    
</div>
<!-- END Container -->

</body>
</html>


listdocums.html

<!DOCTYPE html>
<html lang="en-us" >
<head>
<title>Documents </title>
<link rel="stylesheet" type="text/css" href="/static/admin/css/base.css" />
<link rel="stylesheet" type="text/css" href="/static/admin/css/forms.css" />
<!--[if lte IE 7]><link rel="stylesheet" type="text/css" href="/static/admin/css/ie.css" />--><!--[endif]-->

<script type="text/javascript">window.__admin_media_prefix__ = "/static/admin/";</script>


<script type="text/javascript" src="/admin/jsi18n/"></script>
<script type="text/javascript" src="/static/admin/js/core.js"></script>
<script type="text/javascript" src="/static/admin/js/admin/RelatedObjectLookups.js"></script>
<script type="text/javascript" src="/static/admin/js/jquery.js"></script>
<script type="text/javascript" src="/static/admin/js/jquery.init.js"></script>
<script type="text/javascript" src="/static/admin/js/actions.js"></script>
<script type="text/javascript" src="/static/admin/js/calendar.js"></script>
<script type="text/javascript" src="/static/admin/js/admin/DateTimeShortcuts.js"></script>

<meta name="robots" content="NONE,NOARCHIVE" />
</head>


<body class="jobsapp-document change-form">

<!-- Container -->
<div id="container">

    
    <!-- Header -->
    <div id="header">
        <div id="branding">
        
<h1 id="site-name">Available documents</h1>

        </div>
        
        <div id="user-tools">
            Welcome,
            <strong>{{username}}</strong>.
            
                
                
                <a href="/jobtracker/home">Home Page</a> /
                <a href="/jobtracker/logout/">Log out</a>
            
        </div>
        
        
    </div>
    <!-- END Header -->


    
    <div id="doc-list" >

{% if all_docs %}
    <table border="">
        <tr>
            <th>Remove</th>
            <th>File Name</th>
            <th>Doc type</th>
            <th>Description</th>
            <th>Upload Date</th>
        </tr>
    {% for doc in all_docs %}
        <tr>
            <td>
                <form action="/jobtracker/document/del/" method="post"  id="document_delete"> <div style='display:none'></div>
                      {% csrf_token %} 
                      <button name="doc_id" type="submit" value="{{ doc.doc_key }}">Delete</button>
                </form>
            </td>
            <td>
                <a href="/jobtracker/document/{{ doc.doc_key }}/">{{ doc.the_doc.name }}</a>
            </td>
            <td>
                {{ doc.doc_type}} 
            </td>
            <td>
                {{ doc.doc_descr }}
            </td>
            <td>
                {{doc.doc_ul_date}} 
            </td>
        </tr>

    {% endfor %}
    </table> 
{% else %}
    <p>No documents available.</p>
{% endif %}

    </div>    

    <!-- Content -->
    <div id="content" class="colM">
        
        <h1>Add document</h1>
        <div id="content-main">



<form enctype="multipart/form-data" action="/jobtracker/document/" method="post" 
           id="document_form"><div style='display:none'></div>
{% csrf_token %}           
<div>



  <fieldset class="module aligned ">
    
        <div class="form-row field-the_doc">
            
            
                <div>
                    
                        <label for="id_the_doc" class="required">The doc:</label>
                        
                            <input type="file" name="the_doc" id="id_the_doc" />
                        
                </div>
            
        </div>
    
        <div class="form-row field-doc_descr">
            
                <div>
                     
                        <label for="id_doc_descr" class="required">Doc descr:</label>
                        
                            <input id="id_doc_descr" type="text" class="vTextField" name="doc_descr" maxlength="255" />
                    
                </div>
            
        </div>
    
    
        <div class="form-row field-doc_type">
            
                <div>
                    
                        <label for="id_doc_type" class="required">Doc type:</label>
                        
                            <select name="doc_type" id="id_doc_type">
                                    <option value="Resume"selected>Resume</option>
                                    <option value="Cover Letter">Cover Letter</option>
                                    <option value="Form">Form</option>
                            </select>
                    
                </div>
            
        </div>
    
    
  </fieldset>


<div class="submit-row">
<input type="submit" value="Upload" class="default" name="_save" />

</div>



<script type="text/javascript">
(function($) {
    var field;


})(django.jQuery);
</script>


</div>
</form></div>

        
        <br class="clear" />
    </div>
    <!-- END Content -->

    <div id="footer"
        style='color:red'>
        {% if error_message %}<p><strong>{{ error_message }}</strong></p>{% endif %}

    </div>
</div>
<!-- END Container -->

</body>
</html>






